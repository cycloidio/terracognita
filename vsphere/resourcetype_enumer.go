// Code generated by "enumer -type ResourceType -addprefix vsphere_ -transform snake -linecomment"; DO NOT EDIT.

package vsphere

import (
	"fmt"
	"strings"
)

const _ResourceTypeName = "vsphere_compute_clustervsphere_resource_poolvsphere_datacentervsphere_foldervsphere_datastore_clustervsphere_virtual_machine"

var _ResourceTypeIndex = [...]uint8{0, 23, 44, 62, 76, 101, 124}

const _ResourceTypeLowerName = "vsphere_compute_clustervsphere_resource_poolvsphere_datacentervsphere_foldervsphere_datastore_clustervsphere_virtual_machine"

func (i ResourceType) String() string {
	i -= 1
	if i < 0 || i >= ResourceType(len(_ResourceTypeIndex)-1) {
		return fmt.Sprintf("ResourceType(%d)", i+1)
	}
	return _ResourceTypeName[_ResourceTypeIndex[i]:_ResourceTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ResourceTypeNoOp() {
	var x [1]struct{}
	_ = x[computeCluster-(1)]
	_ = x[resourcePool-(2)]
	_ = x[datacenter-(3)]
	_ = x[folder-(4)]
	_ = x[datastoreCluster-(5)]
	_ = x[virtualMachine-(6)]
}

var _ResourceTypeValues = []ResourceType{computeCluster, resourcePool, datacenter, folder, datastoreCluster, virtualMachine}

var _ResourceTypeNameToValueMap = map[string]ResourceType{
	_ResourceTypeName[0:23]:         computeCluster,
	_ResourceTypeLowerName[0:23]:    computeCluster,
	_ResourceTypeName[23:44]:        resourcePool,
	_ResourceTypeLowerName[23:44]:   resourcePool,
	_ResourceTypeName[44:62]:        datacenter,
	_ResourceTypeLowerName[44:62]:   datacenter,
	_ResourceTypeName[62:76]:        folder,
	_ResourceTypeLowerName[62:76]:   folder,
	_ResourceTypeName[76:101]:       datastoreCluster,
	_ResourceTypeLowerName[76:101]:  datastoreCluster,
	_ResourceTypeName[101:124]:      virtualMachine,
	_ResourceTypeLowerName[101:124]: virtualMachine,
}

var _ResourceTypeNames = []string{
	_ResourceTypeName[0:23],
	_ResourceTypeName[23:44],
	_ResourceTypeName[44:62],
	_ResourceTypeName[62:76],
	_ResourceTypeName[76:101],
	_ResourceTypeName[101:124],
}

// ResourceTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ResourceTypeString(s string) (ResourceType, error) {
	if val, ok := _ResourceTypeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _ResourceTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ResourceType values", s)
}

// ResourceTypeValues returns all values of the enum
func ResourceTypeValues() []ResourceType {
	return _ResourceTypeValues
}

// ResourceTypeStrings returns a slice of all String values of the enum
func ResourceTypeStrings() []string {
	strs := make([]string, len(_ResourceTypeNames))
	copy(strs, _ResourceTypeNames)
	return strs
}

// IsAResourceType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ResourceType) IsAResourceType() bool {
	for _, v := range _ResourceTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
