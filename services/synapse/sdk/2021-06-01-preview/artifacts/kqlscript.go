package artifacts

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"net/http"

	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
)

// KqlScriptClient is the client for the KqlScript methods of the Artifacts service.
type KqlScriptClient struct {
	BaseClient
}

// NewKqlScriptClient creates an instance of the KqlScriptClient client.
func NewKqlScriptClient(endpoint string) KqlScriptClient {
	return KqlScriptClient{New(endpoint)}
}

// CreateOrUpdate creates or updates a KQL Script
// Parameters:
// kqlScriptName - KQL script name
// kqlScript - KQL script
func (client KqlScriptClient) CreateOrUpdate(ctx context.Context, kqlScriptName string, kqlScript KqlScriptResource) (result KqlScriptCreateOrUpdateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/KqlScriptClient.CreateOrUpdate")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreateOrUpdatePreparer(ctx, kqlScriptName, kqlScript)
	if err != nil {
		err = autorest.NewErrorWithError(err, "artifacts.KqlScriptClient", "CreateOrUpdate", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "artifacts.KqlScriptClient", "CreateOrUpdate", nil, "Failure sending request")
		return
	}

	return
}

// CreateOrUpdatePreparer prepares the CreateOrUpdate request.
func (client KqlScriptClient) CreateOrUpdatePreparer(ctx context.Context, kqlScriptName string, kqlScript KqlScriptResource) (*http.Request, error) {
	urlParameters := map[string]interface{}{

		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"kqlScriptName": autorest.Encode("path", kqlScriptName),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithCustomBaseURL("{endpoint}", urlParameters),
		autorest.WithPathParameters("/kqlScripts/{kqlScriptName}", pathParameters),
		autorest.WithJSON(kqlScript),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
// http.Response Body if it receives an error.
func (client KqlScriptClient) CreateOrUpdateSender(req *http.Request) (future KqlScriptCreateOrUpdateFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
// closes the http.Response Body.
func (client KqlScriptClient) CreateOrUpdateResponder(resp *http.Response) (result KqlScriptResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteByName delete KQL script by name
// Parameters:
// kqlScriptName - KQL script name
func (client KqlScriptClient) DeleteByName(ctx context.Context, kqlScriptName string) (result KqlScriptDeleteByNameFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/KqlScriptClient.DeleteByName")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteByNamePreparer(ctx, kqlScriptName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "artifacts.KqlScriptClient", "DeleteByName", nil, "Failure preparing request")
		return
	}

	result, err = client.DeleteByNameSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "artifacts.KqlScriptClient", "DeleteByName", nil, "Failure sending request")
		return
	}

	return
}

// DeleteByNamePreparer prepares the DeleteByName request.
func (client KqlScriptClient) DeleteByNamePreparer(ctx context.Context, kqlScriptName string) (*http.Request, error) {
	urlParameters := map[string]interface{}{

		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"kqlScriptName": autorest.Encode("path", kqlScriptName),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{endpoint}", urlParameters),
		autorest.WithPathParameters("/kqlScripts/{kqlScriptName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteByNameSender sends the DeleteByName request. The method will close the
// http.Response Body if it receives an error.
func (client KqlScriptClient) DeleteByNameSender(req *http.Request) (future KqlScriptDeleteByNameFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// DeleteByNameResponder handles the response to the DeleteByName request. The method always
// closes the http.Response Body.
func (client KqlScriptClient) DeleteByNameResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetByName get KQL script by name
// Parameters:
// kqlScriptName - KQL script name
func (client KqlScriptClient) GetByName(ctx context.Context, kqlScriptName string) (result KqlScriptResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/KqlScriptClient.GetByName")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetByNamePreparer(ctx, kqlScriptName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "artifacts.KqlScriptClient", "GetByName", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetByNameSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "artifacts.KqlScriptClient", "GetByName", resp, "Failure sending request")
		return
	}

	result, err = client.GetByNameResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "artifacts.KqlScriptClient", "GetByName", resp, "Failure responding to request")
		return
	}

	return
}

// GetByNamePreparer prepares the GetByName request.
func (client KqlScriptClient) GetByNamePreparer(ctx context.Context, kqlScriptName string) (*http.Request, error) {
	urlParameters := map[string]interface{}{

		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"kqlScriptName": autorest.Encode("path", kqlScriptName),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{endpoint}", urlParameters),
		autorest.WithPathParameters("/kqlScripts/{kqlScriptName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetByNameSender sends the GetByName request. The method will close the
// http.Response Body if it receives an error.
func (client KqlScriptClient) GetByNameSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetByNameResponder handles the response to the GetByName request. The method always
// closes the http.Response Body.
func (client KqlScriptClient) GetByNameResponder(resp *http.Response) (result KqlScriptResource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Rename rename KQL script
// Parameters:
// kqlScriptName - KQL script name
// renameRequest - rename request
func (client KqlScriptClient) Rename(ctx context.Context, kqlScriptName string, renameRequest RenameRequest) (result KqlScriptRenameFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/KqlScriptClient.Rename")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: renameRequest,
			Constraints: []validation.Constraint{{Target: "renameRequest.NewName", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "renameRequest.NewName", Name: validation.MaxLength, Rule: 260, Chain: nil},
					{Target: "renameRequest.NewName", Name: validation.MinLength, Rule: 1, Chain: nil},
					{Target: "renameRequest.NewName", Name: validation.Pattern, Rule: `^[A-Za-z0-9_][^<>*#.%&:\\+?/]*$`, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("artifacts.KqlScriptClient", "Rename", err.Error())
	}

	req, err := client.RenamePreparer(ctx, kqlScriptName, renameRequest)
	if err != nil {
		err = autorest.NewErrorWithError(err, "artifacts.KqlScriptClient", "Rename", nil, "Failure preparing request")
		return
	}

	result, err = client.RenameSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "artifacts.KqlScriptClient", "Rename", nil, "Failure sending request")
		return
	}

	return
}

// RenamePreparer prepares the Rename request.
func (client KqlScriptClient) RenamePreparer(ctx context.Context, kqlScriptName string, renameRequest RenameRequest) (*http.Request, error) {
	urlParameters := map[string]interface{}{

		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"kqlScriptName": autorest.Encode("path", kqlScriptName),
	}

	const APIVersion = "2021-06-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{endpoint}", urlParameters),
		autorest.WithPathParameters("/kqlScripts/{kqlScriptName}/rename", pathParameters),
		autorest.WithJSON(renameRequest),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RenameSender sends the Rename request. The method will close the
// http.Response Body if it receives an error.
func (client KqlScriptClient) RenameSender(req *http.Request) (future KqlScriptRenameFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// RenameResponder handles the response to the Rename request. The method always
// closes the http.Response Body.
func (client KqlScriptClient) RenameResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}
